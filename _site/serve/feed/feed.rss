<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Martin Shwalbe Blog Feed</title>
 <link href="http://hounddog.github.com/feed/" rel="self"/>
 <link href="http://hounddog.github.com/"/>
 <updated>2014-03-04T18:37:49+01:00</updated>
 <id>http://hounddog.github.com/</id>
 <author>
   <name>Martin Shwalbe</name>
   <email>martin.shwalbe@gmail.com</email>
 </author>

 
 <entry>
   <title>Using Environment configuration with Yeoman Angular Generator</title>
   <link href="http://hounddog.github.com/blog/using-environment-configuration-with-grunt"/>
   <updated>2014-03-04T00:00:00+01:00</updated>
   <id>http://hounddog.github.com/blog/using-environment-configuration-with-grunt</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    I am using https://github.com/yeoman/generator-angular and needed to inject environment variables.
    As it turns out it was really simple.

    I am using https://github.com/werk85/grunt-ng-constant

    Install ng-constant
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
npm install grunt-ng-constant --save-dev
&lt;/pre&gt;

we need to then add in our Grunfile in the init section somewhere

&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
    ngconstant: {
      options: {
        space: '  '
      },
      // Environment targets
      development: [{
        dest: '.tmp/scripts/config.js',
        wrap: '&quot;use strict&quot;;\n\n &lt;%= __ngModule %&gt;',
        name: 'config',
        constants: {
          ENV: {
            name: 'development',
            apiEndpoint: 'http://api.clingr.dev'
          }
        }
      }],
      production: [{
        dest: '.tmp/scripts/config.js',
        wrap: '&quot;use strict&quot;;\n\n &lt;%= __ngModule %&gt;',
        name: 'config',
        constants: {
          ENV: 'production',
          apiEndpoint: 'http://api.memoflo.com'
        }
      }]
    },
&lt;/pre&gt;

Make sure that you have the destination in production and development set to .tmp. I was facing problems that the config files where not generated properly.

For delopment look for this section and add the ngconstant:development
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
    grunt.task.run([
      'clean:server',
      'ngconstant:development',//add this
      'bower-install',
      'concurrent:server',
      'autoprefixer',
      'connect:livereload',
      'watch'
    ]);
  });
&lt;/pre&gt;

&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
  grunt.registerTask('build', [
    'clean:dist',
    'ngconstant:production',
    'bower-install',
    'useminPrepare',
    'concurrent:dist',
    'autoprefixer',
    'concat',
    'ngmin',
    'copy:dist',
    'cdnify',
    'cssmin',
    'uglify',
    'rev',
    'usemin',
    'htmlmin'
  ]);
&lt;/pre&gt;

In our index html we need to include the config file
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&lt;!-- build:js({.tmp,app}) scripts/scripts.js --&gt;
&lt;script src=&quot;/scripts/app.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/scripts/config.js&quot;&gt;&lt;/script&gt;
&lt;!-- endbuild --&gt;
&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Continuous Deployment</title>
   <link href="http://hounddog.github.com/blog/continuous-deployment"/>
   <updated>2013-05-20T00:00:00+02:00</updated>
   <id>http://hounddog.github.com/blog/continuous-deployment</id>
   <content type="html">&lt;style&gt;
.quote {
    font-style:italic;
    font-size:10px;
}
&lt;/style&gt;
&lt;div class=&quot;reveal&quot;&gt;
    &lt;!-- Any section element inside of this container is displayed as a slide --&gt;
    &lt;div class=&quot;slides&quot;&gt;
        &lt;section&gt;
            &lt;h2&gt;Continuous Integration&lt;/h2&gt;
                &amp;amp;
            &lt;h2&gt;Continuous Deployment&lt;/h2&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h2&gt;
                &lt;a href=&quot;http://ocramius.github.com/&quot; target=&quot;_blank&quot; rel=&quot;me&quot;&gt;Martin Shwalbe&lt;/a&gt;
            &lt;/h2&gt;
            &lt;p class=&quot;fragment&quot;&gt;
                &lt;span class=&quot;zf-color&quot;&gt;Zf2&lt;/span&gt; contributor
            &lt;/p&gt;
            &lt;p class=&quot;fragment&quot;&gt;
                &lt;span class=&quot;zf-color&quot;&gt;Modules&lt;/span&gt; &lt;strike&gt;developer&lt;/strike&gt; &lt;span class=&quot;fragment&quot;&gt;time waster&lt;/span&gt;
            &lt;/p&gt;
            &lt;p class=&quot;fragment&quot;&gt;
                &lt;a href=&quot;http://twitter.com/mshwalbe&quot; target=&quot;_blank&quot;&gt;@mshwalbe&lt;/a&gt;
                -
                &lt;a href=&quot;http://github.com/Hounddog&quot; target=&quot;_blank&quot;&gt;Hounddog&lt;/a&gt;
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;Continuous Integration&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;What is Continuous Integration?&lt;/h2&gt;
                &lt;blockquote&gt;
                    &quot;Continuous Integration is a software development practice where members of a team integrate their work frequently&quot; --Martin Fowler
                &lt;blockquote&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Testing&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Available Tools&lt;/h2&gt;
                &lt;p class=&quot;fragment&quot;&gt;
                    Travis
                &lt;/p&gt;
                &lt;p class=&quot;fragment&quot;&gt;
                    Bamboo
                &lt;/p&gt;
                &lt;p class=&quot;fragment&quot;&gt;
                    Jenkins
                &lt;/p&gt;
                &lt;p class=&quot;fragment&quot;&gt;
                    many more...
                &lt;/p&gt;
            &lt;/section&gt;
             &lt;section&gt;
                &lt;h2&gt;Requirements for successfull CI&lt;/h2&gt;
                &lt;p&gt;100% Code Coverage&lt;/p&gt;
                &lt;p&gt;100% Clean Code&lt;/p&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Is this guy Crazy?&lt;/h2&gt;
                &lt;p&gt;We are developing already for some time, implementing Code Coverage till 100% will take us at least 6 Months!&lt;/p&gt;
            &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;What Is Continuous Deployment?&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Automation&lt;/h2&gt;
                &lt;img src=&quot;/img/presentation_cd/automate.jpg&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Reduces code inventory&lt;/h2&gt;
                &lt;img src=&quot;/img/presentation_cd/warehouse2.jpg&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Improves Confidence&lt;/h2&gt;
                &lt;img src=&quot;/img/presentation_cd/mrt.png&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Safety&lt;/h2&gt;
                &lt;img src=&quot;/img/presentation_cd/safety.gif&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Fast turnaround&lt;/h2&gt;
                &lt;h3&gt;Happy Customers&lt;/h3&gt;
                &lt;img src=&quot;/img/presentation_cd/happy-customers.jpg&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Happy Developers&lt;/h2&gt;
                &lt;img src=&quot;/img/presentation_cd/happy-developer.gif&quot; /&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Available Tools?&lt;/h2&gt;
                &lt;p&gt;Jenkins, Bamboo&lt;/p&gt;
            &lt;/section&gt;

        &lt;/section&gt;
        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;Considerations&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Traditional Release Cycles&lt;/h2&gt;
                &lt;h3&gt;Timeline&lt;/h3&gt;
                &lt;h4&gt;1-4 Weeks&lt;/h4&gt;
                &lt;table cellspacing=&quot;0&quot; class=&quot;trc&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;td&gt;Development&lt;/td&gt;
                            &lt;td&gt;
                                Release&lt;br&gt; Cut
                            &lt;/td&gt;
                            &lt;td&gt;Stage&lt;/td&gt;
                            &lt;td&gt;QA&lt;/td&gt;
                            &lt;td&gt;Fix Bugs&lt;/td&gt;
                            &lt;td&gt;Integrate Patches&lt;/td&gt;
                            &lt;td&gt;Release&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;br /&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;div class=&quot;right_arrow&quot;&gt;
                    &lt;div class=&quot;dotted&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;body&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;style type=&quot;text/css&quot;&gt;
                    .trc tbody td{
                        border-right:4px solid red;
                        height:80px;
                    }
                    .trc thead td {
                        text-align: center;
                        vertical-align: middle;
                    }
                    .trc hr {
                        border:0;
                        background-color: blue;
                        height:5px;
                        width:5px;
                        float:left;
                        margin:0;
                        padding:0;
                    }

                    .right_arrow {
                        top:-60px;
                        position:relative;
                        height:50px;
                        width:100%;
                        border:5px solid black;
                    }
                    .right_arrow .arrow {
                        border-color: transparent transparent transparent blue;
                        border-style:solid;
                        border-width:20px 0 25px 25px;
                        width:0; height:0;
                        float:left;
                    }
                    .right_arrow .body {
                        float: left;
                        margin-top:18px;
                        height: 10px;
                        width: 655px;
                        background-color: blue;
                    }
                    .right_arrow .dotted {
                        margin-top:18px;
                        float: left;
                        border-bottom:10px dashed blue;
                        width:215px;
                    }
                &lt;/style&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Continuous Deployment Release Cycles&lt;/h2&gt;
                &lt;h3&gt;Timeline&lt;/h3&gt;
                &lt;h4&gt;5-10 minutes&lt;/h4&gt;
                &lt;table cellspacing=&quot;0&quot; class=&quot;trc&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;td&gt;Development&lt;/td&gt;
                            &lt;td style=&quot;text-decoration:line-through&quot;&gt;
                                Release&lt;br&gt; Cut
                            &lt;/td&gt;
                            &lt;td style=&quot;text-decoration:line-through&quot;&gt;Stage&lt;/td&gt;
                            &lt;td&gt;Automated QA testing and staging&lt;/td&gt;
                            &lt;td style=&quot;text-decoration:line-through&quot;&gt;Fix Bugs&lt;/td&gt;
                            &lt;td style=&quot;text-decoration:line-through&quot;&gt;Integrate Patches&lt;/td&gt;
                            &lt;td&gt;Release&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;br /&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                            &lt;td&gt;&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;div class=&quot;right_arrow&quot;&gt;
                    &lt;div class=&quot;dotted&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;body&quot;&gt;&lt;/div&gt;
                    &lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;style type=&quot;text/css&quot;&gt;
                    .trc tbody td{
                        border-right:4px solid red;
                        height:80px;
                    }
                    .trc thead td {
                        text-align: center;
                        vertical-align: middle;
                    }
                    .trc hr {
                        border:0;
                        background-color: blue;
                        height:5px;
                        width:5px;
                        float:left;
                        margin:0;
                        padding:0;
                    }

                    .right_arrow {
                        top:-60px;
                        position:relative;
                        height:50px;
                        width:100%;
                        border:5px solid black;
                    }
                    .right_arrow .arrow {
                        border-color: transparent transparent transparent blue;
                        border-style:solid;
                        border-width:20px 0 25px 25px;
                        width:0; height:0;
                        float:left;
                    }
                    .right_arrow .body {
                        float: left;
                        margin-top:18px;
                        height: 10px;
                        width: 655px;
                        background-color: blue;
                    }
                    .right_arrow .dotted {
                        margin-top:18px;
                        float: left;
                        border-bottom:10px dashed blue;
                        width:215px;
                    }
                &lt;/style&gt;
            &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;section&gt;
                &lt;h2&gt;Strategies&lt;/h2&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;UI Upgrades&lt;/h2&gt;
                &lt;p&gt;Enable ui upgrades only through configuration Switches&lt;/p&gt;
            &lt;/section&gt;
            &lt;section&gt;
                &lt;h2&gt;Database Upgrades&lt;/h2&gt;
                &lt;p&gt;Only do non-destructive database updates&lt;/p&gt;
            &lt;/section&gt;
        &lt;/section&gt;
        &lt;section&gt;Questions?&lt;/section&gt;
    &lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>There is a Module for that</title>
   <link href="http://hounddog.github.com/blog/there-is-a-module-for-that"/>
   <updated>2012-11-30T00:00:00+01:00</updated>
   <id>http://hounddog.github.com/blog/there-is-a-module-for-that</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;p&gt;This is a blog post greatly inspired by a slide that I have found created by Christophe Coevet, his slide can be found &lt;a href=&quot;http://friendsofsymfony.github.com/slides/there_is_a_bundle_for_that.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I spend a lot of my time on #zftalk freenode.net helping people to solve their problems or just chatting away. One of the things I am noticing every day is that people despite our tries to help them keep building their own &quot;custom&quot; modules. Why? I mean a very simple example for this is ZfcUser. Every day I see someone asking about authentication problem or how to create a login or even acl. When we tell them there is a module existing we get the most diverse answers to this.&lt;/p&gt;

    &lt;p&gt; Some of these answers are:&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;I would need to learn this module&lt;/li&gt;
        &lt;li&gt;I need a customized solution&lt;/li&gt;
        &lt;li&gt;I want to learn how the system works&lt;/li&gt;
        &lt;li&gt;I just need something simple&lt;/li&gt;
        &lt;li&gt;My boss does not pay me to learn/fix someone elses module&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Let's just take a look at some of these answers.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;I Would need to learn this module.&lt;/strong&gt; Yes, i absolutely agree but even if you build your own solution don't you have to invest time and effort also to make it do what you want? Lot of people who answered this are also learning Zend Framework 2 but I see none of them building their own framework.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;I need a customized solution.&lt;/strong&gt; This is mostly with reference to ZfcUser. I agree this module is not perfect but mostly it fits every need I can think of. It has been designed with scalability in mind so you can just change your form the way you require it or adapt your database to hold new information. If it still does not support the required feature you can also modify it and submit a pr to make it a better module.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;I want to learn how the system works.&lt;/strong&gt; No arguments against that but why learn how to build something that is existing? Why not try and build your own application in a fast way. Having an application up and running in no time gives me the greatest learning experience as I have this nice and cozy feeling when I see what I have accomplished in a short time instead of wasting hours trying to build something which is existing.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;I just need something simple.&lt;/strong&gt; Again... Most modules are designed with scalability in mind and mostly just solve the most basic use cases by default. What could be simpler?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;My boss does not pay me to learn/fix someone elses module.&lt;/strong&gt;  I don't know about you, but my boss also does not pay to sit around and build something which exists. My boss wants results and that as fast as possible. If I can show my boss that instead of building our own solution we can use some module and modify it to our needs which might take less time or even the same and justifying it by explaining that this has been tested by many people out of the community, he hardly never says no.&lt;/p&gt;

    &lt;p&gt;Let's be honest, you or I might be thinking that we are the greatest programmers in the world but there is always someone better out there or someone who has some genius idea. Use the power of this great community, most of us are more then willing to help you find your module or even build one together with you if it does not exist.&lt;/p&gt;

    &lt;p&gt; The time of sitting alone and grumbling how the module could be made reusable is over. Invest your time to find a suitable module or even discuss with people on how to create a module that can be useful to the community. I personally cannot think of a greater feeling when someone comes and tells me &quot;hey I used your module and it just took me a few minutes to get up and running&quot;. Having helped myself and someone else by creating a reusable module is more then I could ask for.&lt;/p&gt;

    &lt;p&gt;This brings me to another point. As I am currently building the &lt;a href=&quot;http://modules.zendframework.com&quot;&gt;modules.zendframework.com&lt;/a&gt; website I mostly also observe every module that get's submitted there. It's really great to see all these contributions and new modules popping up on a daily basis. Again, check first if a module is existing. I see a lot of modules solving problems which others already have.&lt;/p&gt;

    &lt;h1&gt;Search before you create a module!!!&lt;/h1&gt;

    &lt;h1&gt;Flexibility of Modules and how to override them&lt;/h1&gt;

&lt;p&gt;You can nearly override anything with in a module from views to controller over services and mappers&lt;/p&gt;
&lt;p&gt;Create your own module which can extend/modify the original module. All you need to do is register it after the original Module in &lt;code&gt;application.config.php&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'modules' =&gt; array(
        'OriginalModule',
        'MyModule',//this will override OriginalModule with any custom configurations you require
    ),
    'module_listener_options' =&gt; array(
        'config_glob_paths'    =&gt; array(
            'config/autoload/{,*.}{global,local}.php',
        ),
        'module_paths' =&gt; array(
            './module',
            './vendor',
        ),
    ),
);
&lt;/pre&gt;
    &lt;h2&gt;Override a template&lt;/h2&gt;
    &lt;p&gt; create the same view structure as the OriginalModule and place your custom templates there. Example:&lt;/p&gt;

    &lt;h3&gt;OriginalModule&lt;/h3&gt;
&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
Config:
'view_manager' =&gt; array(
    'template_path_stack' =&gt; array(
        __DIR__ . '/../view',
    ),
),

Folder Structure:
view/
    index/
        index/
            index.phtml
&lt;/pre&gt;

&lt;h3&gt;MyModule&lt;/h3&gt;
&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
Config:
'view_manager' =&gt; array(
    'template_path_stack' =&gt; array(
        __DIR__ . '/../view',
    ),
),

Folder Structure:
view/
    index/
        index/
            index.phtml //Overrides the Original index.phtml with our custom code
&lt;/pre&gt;

&lt;h3&gt;Override a Controller/Service&lt;/h3&gt;

&lt;p&gt; Mostly all controllers and services are registered with the servicemanager and can be overriden bey they key&lt;/p&gt;

&lt;h3&gt;OriginalModule&lt;/h3&gt;

&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
'controllers' =&gt; array(
    'invokables' =&gt; array(
        'Application\Controller\Index' =&gt; 'Application\Controller\IndexController',
    ),
),
&lt;/pre&gt;

&lt;h3&gt;MyModule&lt;/h3&gt;
&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
'controllers' =&gt; array(
    'invokables' =&gt; array(
        'Application\Controller\Index' =&gt; 'MyModule\Controller\IndexController',
    ),
),
&lt;/pre&gt;

&lt;p&gt;Just by assigning my Custom controller to the Key &lt;code&gt;Application\Controller\Index&lt;/code&gt; i have now replaced it. Same goes for the services or anything else that was configured using the service configuration&lt;/p&gt;

&lt;h3&gt;Extending Forms in ZfcUser&lt;/h3&gt;
&lt;p&gt;I am taking this as an example as there is a nice way of extending forms in ZfcUser just by using an event.&lt;/p&gt;
&lt;p&gt;Just place the following code as also explained in the wiki into your Module.php&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-prepro&quot;&gt;
public function onBootstrap($e)
{
    $events = $e-&gt;getApplication()-&gt;getEventManager()-&gt;getSharedManager();
    $events-&gt;attach('ZfcUser\Form\Register','init', function($e) {
        $form = $e-&gt;getTarget();
        // Do what you please with the form instance ($form)
    });
    $events-&gt;attach('ZfcUser\Form\RegisterFilter','init', function($e) {
        $filter = $e-&gt;getTarget();
        // Do what you please with the filter instance ($filter)
    });
}
&lt;/pre&gt;
&lt;p&gt;As you can see you can attach anything to the formobject here and modify it to do exactly what you require&lt;/p&gt;

&lt;p&gt;If you are unsure on how to contribute, you can come and ask us on irc #zftalk and most people will be more then willing to help. Furthermore just get started by forking existing modules on github and submit a pr&lt;/p&gt;

&lt;p&gt;I hope that you are going to think of this post in the future and will keep in mind the essence of it &lt;code&gt;There is a module for that&lt;/code&gt; and if not, create one that can be used by the community. I hope you enjoyed reading this and hope to see you soon creating and contributing to existing modules. So long!&lt;/p&gt;

&lt;!--
&lt;h2&gt;Composer&lt;/h2&gt;
    &lt;ul&gt;
        &lt;li&gt;Default dependency management as of Zend Framework 2&lt;/li&gt;
        &lt;li&gt;Modules should be registered on Packagist&lt;/li&gt;
        &lt;li&gt;Use Packagist to create your own composer index&lt;/li&gt;
        &lt;li&gt;Make sure to enable the &quot;Packagist&quot; commit hook&lt;/li&gt;
    &lt;/ul&gt;
&lt;pre&gt;
{
    &quot;name&quot;: &quot;acme/my-bundle&quot;,
    &quot;type&quot;: &quot;zend-framework-module&quot;,
    &quot;description&quot;: &quot;This Module is an example&quot;,
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Duffy Duck&quot;,
            &quot;email&quot;: &quot;diffy@acme.com&quot;
        }
    ],
    &quot;require&quot;: {
        &quot;php&quot;:                      &quot;&gt;=5.3.3&quot;,
        &quot;zendframework/zf2&quot;: &quot;&gt;=2.0&quot;,
    }
}
&lt;/pre&gt;

    &lt;h2&gt;Create Tests for your modules with travis.ci&lt;/h2&gt;
    &lt;p&gt;Create a &lt;code&gt;travis.yml&lt;/code&gt; file and enable github hooks to run tests automatically.&lt;/p&gt;
&lt;pre&gt;
language: php
php:
  - &quot;5.3&quot;

before_script:
- cd ..
- git clone git://github.com/zendframework/ZendSkeletonApplication.git
- cd ZendSkeletonApplication
- php composer.phar self-update
- php composer.phar install --dev
- cp -r ../MyModule module/MyModule
- cd vendor/MyModule
- wget http://cs.sensiolabs.org/get/php-cs-fixer.phar

script:
  - phpunit
  - php coverage-checker.php clover.xml 76
  - output=$(php php-cs-fixer.phar fix -v --dry-run --level=psr2 .); if [[ $output ]]; then while read -r line; do echo -e &quot;\e[00;31m$line\e[00m&quot;; done &lt;&lt;&lt; &quot;$output&quot;; false; fi;
&lt;/pre&gt;
--&gt;

&lt;p&gt;If you need to write your own module or are looking for some usefull tips on writing better modules have a look at Michaël Gallego's blog for &lt;a href=&quot;http://www.michaelgallego.fr/blog/2013/01/21/some-tips-to-write-better-zend-framework-2-modules/&quot; target=&quot;blank&quot;&gt;writing better Zend Framework 2 Modules&lt;/a&gt;.
&lt;/div&gt;-</content>
 </entry>
 
 <entry>
   <title>Improving Performance in Zend Framework 2</title>
   <link href="http://hounddog.github.com/blog/performance-in-zend-framework-2"/>
   <updated>2012-11-18T00:00:00+01:00</updated>
   <id>http://hounddog.github.com/blog/performance-in-zend-framework-2</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;p&gt;
        I am going to list options here on how to improve the Performance. This will be an ongoing list which i will keep updated while doing performance improvements.
    &lt;/p&gt;
    &lt;h1&gt;Autoloader Classmap&lt;/h1&gt;
    &lt;p&gt;As described by Rob Allen on his &lt;a href=&quot;http://akrabat.com/zend-framework-2/using-zendloaderautoloader/&quot; target=&quot;_blank&quot;&gt;Blog&lt;/a&gt;.&lt;/p&gt;
    &lt;pre&gt;
The class map autoloader is a high performance autoloader. It uses class maps, which are simply associative arrays of each classname to the name of the file disk that contains that class.
    &lt;/pre&gt;
    This is a very simple process and takes just a few minutes to generate and include the classmaps for each module you have created.
    &lt;h2&gt;Create Classmaps&lt;/h2&gt;
    &lt;pre&gt;
As you can imagine, creating class maps manually would quickly get tiresome. To alleviate this, Zend Framework 2 provides a PHP script, classmap_generator.php in the `bin` directory that will do this for you. This tool will scan the entire directory from the current directory (or that specified via an option) and create a class map file for every class that it finds. It is used like this:

prompt&gt; path/to/zf2/bin/classmap_generator.php -w
Creating class file map for library in '/var/www/project/library'...
Wrote classmap file to '/var/www/project/library/autoload_classmap.php'
    &lt;/pre&gt;

    &lt;h1&gt;Template Map&lt;/h1&gt;
    &lt;p&gt;Most people use the 'template_path_stack' during development. As pointed out by the &lt;a href=&quot;http://framework.zend.com/manual/2.0/en/modules/zend.view.quick-start.html#configuration&quot;&gt;manual&lt;/a&gt;, this can introduce a performance expense.
    &lt;/p&gt;
    &lt;pre&gt;
This is a nice solution for rapid application
development, but potentially introduces performance expense in
production due to the number of stat calls necessary.
    &lt;/pre&gt;
    &lt;p&gt;Once development is completed, consider putting your view's into the template_map as described in the manual.&lt;/p&gt;

    &lt;p&gt;I have now created a templatemap_generator to be found in my &lt;a href=&quot;https://gist.github.com/4169214&quot;&gt;Gist&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;Run this script from the root of your module example &lt;code&gt;module/Album&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
$ php ../../vendor/ZF2/bin/templatemap_generator.php
Creating template file map for library in 'zf2-tutorial/module/Album'...
Wrote templatemap file to 'zf2-tutorial/module/Album/template_map.php'
&lt;/pre&gt;

    &lt;p&gt;You can then just include this file in your &lt;code&gt;module.config.php&lt;/code&gt; as following:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'view_manager' =&gt; array(
        'template_map' =&gt; include __DIR__  .'/../template_map.php',
    ),
);
&lt;/pre&gt;
    &lt;p&gt;You may also include &lt;a href=&quot;https://github.com/Ocramius/OcraCachedViewResolver&quot; target=&quot;_blank&quot;&gt;OcraCachedViewResolver&lt;/a&gt; to handle template resolving performance through caching instead.&lt;/p&gt;
&lt;h1&gt;Module Config Cache&lt;/h1&gt;
    &lt;p&gt;As pointed out by Bakura we should also add a module config cache.&lt;/p&gt;
    &lt;p&gt;Create a &lt;code&gt;modulecache.local.php&lt;/code&gt; file in &lt;code&gt;config/autoload&lt;/code&gt; as follows.
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    // Whether or not to enable a configuration cache.
    // If enabled, the merged configuration will be cached and used in
    // subsequent requests.
    'config_cache_enabled' =&gt; true,
    // The key used to create the configuration cache file name.
    'config_cache_key' =&gt; 'module_config_cache',
    // The path in which to cache merged configuration.
    'cache_dir' =&gt;  './data/cache',
);
 &lt;/pre&gt;

&lt;/pre&gt;
    &lt;p&gt;This is just a quick write up and i will continue to update this with more options. If you feel anything is missing or should be mentioned, please do not hesitate to comment so i can keep this list updated. Thanks for reading!&lt;/p&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Getting Started with REST and Zend Framework 2</title>
   <link href="http://hounddog.github.com/blog/getting-started-with-rest-and-zend-framework-2"/>
   <updated>2012-11-10T00:00:00+01:00</updated>
   <id>http://hounddog.github.com/blog/getting-started-with-rest-and-zend-framework-2</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;p&gt;
        Today i want to show you how to build a rest application. This tutorials assume you have completed the &lt;a href=&quot;http://zf2.readthedocs.org/en/latest/user-guide/overview.html&quot;&gt;Getting Started&lt;/a&gt;. I will be repeating lot of the steps allready explained in there. There is also a sample Album module which you can install from &lt;a href=&quot;https://github.com/Hounddog/Album&quot;&gt;here&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h1&gt;
        Setting up the AlbumRest module
    &lt;/h1&gt;
    &lt;p&gt;
        Start by creating a directory called &lt;code&gt;AlbumRest&lt;/code&gt; under module with the following subdirectories to hold the module’s files:
    &lt;/p&gt;
    &lt;pre&gt;
    zf2-tutorial/
        /module
            /AlbumRest
                /config
                /src
                    /AlbumRest
                        /Controller
                /test
    &lt;/pre&gt;

    &lt;p&gt;
        Create &lt;code&gt;Module.php&lt;/code&gt; in the AlbumRest module at &lt;code&gt;zf2-tutorial/module/AlbumRest&lt;/code&gt;:
    &lt;/p&gt;
    &lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace AlbumRest;

class Module
{
    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\ClassMapAutoloader' =&amp;gt; array(
                __DIR__ . '/autoload_classmap.php',
            ),
            'Zend\Loader\StandardAutoloader' =&amp;gt; array(
                'namespaces' =&amp;gt; array(
                    __NAMESPACE__ =&amp;gt; __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }

    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
&lt;/pre&gt;

    &lt;h1&gt;
        Configuration
    &lt;/h1&gt;
    &lt;p&gt;
        Create a file called &lt;code&gt;module.config.php&lt;/code&gt; under &lt;code&gt;zf2-tutorial/module/AlbumRest/config&lt;/code&gt;:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'controllers' =&amp;gt; array(
        'invokables' =&amp;gt; array(
            'AlbumRest\Controller\AlbumRest' =&amp;gt; 'AlbumRest\Controller\AlbumRestController',
        ),
    ),
    'view_manager' =&amp;gt; array(
        'template_path_stack' =&amp;gt; array(
            'album-rest' =&amp;gt; __DIR__ . '/../view',
        ),
    ),
);
&lt;/pre&gt;

    &lt;p&gt;
        As we are in development, we don’t need to load files via the classmap, so we provide an empty array for the classmap autoloader. Create a file called &lt;code&gt;autoload_classmap.php&lt;/code&gt; under &lt;code&gt;zf2-tutorial/module/AlbumRest&lt;/code&gt;:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array();
&lt;/pre&gt;

    &lt;h1&gt;
        Informing the application about our new module
    &lt;/h1&gt;
    &lt;p&gt;
        We now need to tell the ModuleManager that this new module exists. This is done in the application’s &lt;code&gt;config/application.config.php&lt;/code&gt; file which is provided by the skeleton application. Update this file so that its modules section contains the AlbumRest module as well, so the file now looks like this:
    &lt;/p&gt;
    &lt;p&gt;
        (Changes required are highlighted using comments.)
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'modules' =&amp;gt; array(
        'Application',
        'Album',
        'AlbumRest',              // &amp;lt;-- Add this line
    ),
    'module_listener_options' =&amp;gt; array(
        'config_glob_paths'    =&amp;gt; array(
            'config/autoload/{,*.}{global,local}.php',
        ),
        'module_paths' =&amp;gt; array(
            './module',
            './vendor',
        ),
    ),
);
&lt;/pre&gt;

    &lt;p&gt;
        As you can see, we have added our &lt;code&gt;AlbumRest&lt;/code&gt; module into the list of modules after the &lt;code&gt;Album&lt;/code&gt; module.
    &lt;/p&gt;
    &lt;p&gt;
        We have now set up the module ready for putting our custom code into it.
    &lt;/p&gt;
    &lt;h1&gt;
        Setup Rest Routing
    &lt;/h1&gt;We need to first add our custom REST routing so we are able to call the RestController. This is the updated &lt;code&gt;module.config.php&lt;/code&gt; with the new code highlighted.
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'controllers' =&amp;gt; array(
        'invokables' =&amp;gt; array(
            'AlbumRest\Controller\AlbumRest' =&amp;gt; 'AlbumRest\Controller\AlbumRestController',
        ),
    ),

    // The following section is new and should be added to your file
    'router' =&amp;gt; array(
        'routes' =&amp;gt; array(
            'album-rest' =&amp;gt; array(
                'type'    =&amp;gt; 'segment',
                'options' =&amp;gt; array(
                    'route'    =&amp;gt; '/album-rest[/:id]',
                    'constraints' =&amp;gt; array(
                        'id'     =&amp;gt; '[0-9]+',
                    ),
                    'defaults' =&amp;gt; array(
                        'controller' =&amp;gt; 'AlbumRest\Controller\AlbumRest',
                    ),
                ),
            ),
        ),
    ),

    'view_manager' =&amp;gt; array(
        'template_path_stack' =&amp;gt; array(
            'album-rest' =&amp;gt; __DIR__ . '/../view',
        ),
    ),
);
&lt;/pre&gt;
    &lt;p&gt;
        The name of the route is &lt;code&gt;album-rest&lt;/code&gt; and has a type of &lt;code&gt;segment&lt;/code&gt;. For a RestController we must provide a placeholder in this case the route is &lt;code&gt;/album-rest/id&lt;/code&gt; which will match any URL that starts with &lt;code&gt;/album-rest&lt;/code&gt;. The next segment will be an optional id which is required for the RestController The constraints section allows us to ensure that the characters within a segment are as expected.
    &lt;/p&gt;
    &lt;h1&gt;
        Setup View Strategy
    &lt;/h1&gt;
    &lt;p&gt;
        We add the view strategy to our config at zf2-tutorial/module/Albumrest/config/module.config.php
    &lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'controllers' =&gt; array(
        'invokables' =&gt; array(
            'AlbumRest\Controller\AlbumRest' =&gt; 'AlbumRest\Controller\AlbumRestController',
        ),
    ),

    // The following section is new` and should be added to your file
    'router' =&gt; array(
        'routes' =&gt; array(
            'album-rest' =&gt; array(
                'type'    =&gt; 'Segment',
                'options' =&gt; array(
                    'route'    =&gt; '/album-rest[/:id]',
                    'constraints' =&gt; array(
                        'id'     =&gt; '[0-9]+',
                    ),
                    'defaults' =&gt; array(
                        'controller' =&gt; 'AlbumRest\Controller\AlbumRest',
                    ),
                ),
            ),
        ),
    ),
    'view_manager' =&gt; array( //Add this config
        'strategies' =&gt; array(
            'ViewJsonStrategy',
        ),
    ),
&lt;/pre&gt;

    &lt;h1&gt;
        Create the controller
    &lt;/h1&gt;
    &lt;p&gt;
        Let’s go ahead and create our controller class &lt;code&gt;AlbumRestController.php&lt;/code&gt; at &lt;code&gt;zf2-tutorials/module/AlbumRest/src/AlbumRest/Controller&lt;/code&gt;:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace AlbumRest\Controller;

use Zend\Mvc\Controller\AbstractRestfulController;

use Album\Model\Album;
use Album\Form\AlbumForm;
use Album\Model\AlbumTable;
use Zend\View\Model\JsonModel;

class AlbumRestController extends AbstractRestfulController
{
    public function getList()
    {
        # code...
    }

    public function get($id)
    {
        # code...
    }

    public function create($data)
    {
        # code...
    }

    public function update($id, $data)
    {
        # code...
    }

    public function delete($id)
    {
        # code...
    }
}
&lt;/pre&gt;

    &lt;p&gt;
        We have now set up the controller methods to map the HTTP request methods. You can find a detailed explanation of the methods in the &lt;a href=&quot;http://framework.zend.com/manual/2.0/en/modules/zend.mvc.controllers.html#the-abstractrestfulcontroller&quot;&gt;Manual&lt;/a&gt;
    &lt;/p&gt;
    &lt;h1&gt;
        Write the tests
    &lt;/h1&gt;
    &lt;p&gt;
        Our AlbumRest controller doesn’t do much yet, so it should be easy to test.
    &lt;/p&gt;
    &lt;p&gt;
        Create the follwing subdirectories:
    &lt;/p&gt;
    &lt;pre&gt;
    zf2-tutorial/
        /module
            /AlbumRest
                /test
                    /AlbumRestTest
                        /Controller
    &lt;/pre&gt;

    &lt;p&gt;
        Add the 3 files as described in &lt;a href=&quot;http://framework.zend.com/manual/2.0/en/user-guide/routing-and-controllers.html&quot;&gt;Unit Testing&lt;/a&gt; to module/AlbumRest/test
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Bootstrap.php
        &lt;/li&gt;
        &lt;li&gt;phpunit.xml.dist
        &lt;/li&gt;
        &lt;li&gt;TestConfig.php.dist
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        Remember here to change the &lt;code&gt;namespace&lt;/code&gt; in &lt;code&gt;Bootstrap.php&lt;/code&gt; and change the the &lt;code&gt;TestConfig.php.dist&lt;/code&gt; to following:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
return array(
    'modules' =&amp;gt; array(
        'Album',
        'AlbumRest'
    ),
    'module_listener_options' =&amp;gt; array(
        'config_glob_paths'    =&amp;gt; array(
            '../../../config/autoload/{,*.}{global,local}.php',
        ),
        'module_paths' =&amp;gt; array(
            'module',
            'vendor',
        ),
    ),
);
&lt;/pre&gt;
    &lt;p&gt;
        In &lt;code&gt;phpunit.xml&lt;/code&gt; change the directory to point at AlbumRestTest
    &lt;/p&gt;
    &lt;p&gt;
        Create &lt;code&gt;zf2-tutorial/Album/module/AlbumRest/test/AlbumRestTest/Controller/AlbumRestControllerTest.php&lt;/code&gt; with the following contents:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace AlbumRestTest\Controller;

use AlbumRestTest\Bootstrap;
use AlbumRest\Controller\AlbumRestController;
use Zend\Http\Request;
use Zend\Http\Response;
use Zend\Mvc\MvcEvent;
use Zend\Mvc\Router\RouteMatch;
use Zend\Mvc\Router\Http\TreeRouteStack as HttpRouter;
use PHPUnit_Framework_TestCase;

class AlbumRestControllerTest extends PHPUnit_Framework_TestCase
{
    protected $controller;
    protected $request;
    protected $response;
    protected $routeMatch;
    protected $event;

    protected function setUp()
    {
        $serviceManager = Bootstrap::getServiceManager();
        $this-&amp;gt;controller = new AlbumRestController();
        $this-&amp;gt;request    = new Request();
        $this-&amp;gt;routeMatch = new RouteMatch(array('controller' =&amp;gt; 'index'));
        $this-&amp;gt;event      = new MvcEvent();
        $config = $serviceManager-&amp;gt;get('Config');
        $routerConfig = isset($config['router']) ? $config['router'] : array();
        $router = HttpRouter::factory($routerConfig);
        $this-&amp;gt;event-&amp;gt;setRouter($router);
        $this-&amp;gt;event-&amp;gt;setRouteMatch($this-&amp;gt;routeMatch);
        $this-&amp;gt;controller-&amp;gt;setEvent($this-&amp;gt;event);
        $this-&amp;gt;controller-&amp;gt;setServiceLocator($serviceManager);
    }

    public function testGetListCanBeAccessed()
    {
        $result   = $this-&amp;gt;controller-&amp;gt;dispatch($this-&amp;gt;request);
        $response = $this-&amp;gt;controller-&amp;gt;getResponse();

        $this-&amp;gt;assertEquals(200, $response-&amp;gt;getStatusCode());
    }

    public function testGetCanBeAccessed()
    {
        $this-&amp;gt;routeMatch-&amp;gt;setParam('id', '1');

        $result   = $this-&amp;gt;controller-&amp;gt;dispatch($this-&amp;gt;request);
        $response = $this-&amp;gt;controller-&amp;gt;getResponse();

        $this-&amp;gt;assertEquals(200, $response-&amp;gt;getStatusCode());
    }

    public function testCreateCanBeAccessed()
    {
        $this-&amp;gt;request-&amp;gt;setMethod('post');
        $this-&amp;gt;request-&amp;gt;getPost()-&amp;gt;set('artist', 'foo');
        $this-&amp;gt;request-&amp;gt;getPost()-&amp;gt;set('title', 'bar');

        $result   = $this-&amp;gt;controller-&amp;gt;dispatch($this-&amp;gt;request);
        $response = $this-&amp;gt;controller-&amp;gt;getResponse();

        $this-&amp;gt;assertEquals(200, $response-&amp;gt;getStatusCode());
    }

    public function testUpdateCanBeAccessed()
    {
        $this-&amp;gt;routeMatch-&amp;gt;setParam('id', '1');
        $this-&amp;gt;request-&amp;gt;setMethod('put');

        $result   = $this-&amp;gt;controller-&amp;gt;dispatch($this-&amp;gt;request);
        $response = $this-&amp;gt;controller-&amp;gt;getResponse();

        $this-&amp;gt;assertEquals(200, $response-&amp;gt;getStatusCode());
    }

    public function testDeleteCanBeAccessed()
    {
        $this-&amp;gt;routeMatch-&amp;gt;setParam('id', '1');
        $this-&amp;gt;request-&amp;gt;setMethod('delete');

        $result   = $this-&amp;gt;controller-&amp;gt;dispatch($this-&amp;gt;request);
        $response = $this-&amp;gt;controller-&amp;gt;getResponse();

        $this-&amp;gt;assertEquals(200, $response-&amp;gt;getStatusCode());
    }
}
&lt;/pre&gt;
    &lt;p&gt;And execute &lt;code&gt;phpunit&lt;/code&gt; from &lt;code&gt;module/AlbumRest/test&lt;/code&gt;.&lt;/p&gt;
    &lt;pre&gt;
        PHPUnit 3.7.8 by Sebastian Bergmann.

        .....

        Time: 0 seconds, Memory: 5.25Mb

        OK (5 tests, 5 assertions)
    &lt;/pre&gt;
    &lt;p&gt;
        We are going to consume services from the Album module. Let's start adding in some functionality. In our &lt;code&gt;AlbumRestController.php&lt;/code&gt; add:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums:38 lang-prepro&quot;&gt;
public function getAlbumTable()
{
    if (!$this-&amp;gt;albumTable) {
        $sm = $this-&amp;gt;getServiceLocator();
        $this-&amp;gt;albumTable = $sm-&amp;gt;get('Album\Model\AlbumTable');
    }
    return $this-&amp;gt;albumTable;
}
&lt;/pre&gt;
    &lt;p&gt;
        You should also add:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums:13 lang-prepro&quot;&gt;
    protected $albumTable;
&lt;/pre&gt;
    &lt;p&gt;
        Add this test to your &lt;code&gt;AlbumControllerTest.php&lt;/code&gt;:
    &lt;/p&gt;
    &lt;pre class=&quot;prettyprint linenums:88 lang-prepro&quot;&gt;
    public function testGetAlbumTableReturnsAnInstanceOfAlbumTable()
    {
        $this-&amp;gt;assertInstanceOf('Album\Model\AlbumTable', $this-&amp;gt;controller-&amp;gt;getAlbumTable());
    }
    &lt;/pre&gt;
    &lt;h2&gt;
        Listing albums
    &lt;/h2&gt;
    &lt;p&gt;
        In order to list the albums, we need to retrieve them from the model and return a JsonModel. To do this, we fill in getList() within &lt;code&gt;AlbumRestController&lt;/code&gt;. Update the AlbumRestController’s getList() like this:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums:15 lang-prepro&quot;&gt;
public function getList()
{
    $results = $this-&amp;gt;getAlbumTable()-&amp;gt;fetchAll();
    $data = array();
    foreach($results as $result) {
        $data[] = $result;
    }

    return array('data' =&amp;gt; $data);
}
&lt;/pre&gt;
    &lt;p&gt;
        As we do not have any views for our Controller we need a method on how to test these. For this example i am using &lt;code&gt;curl&lt;/code&gt; to test the functionality.
    &lt;/p&gt;
    &lt;pre&gt;
    $ curl -i -H &quot;Accept: application/json&quot; http://zf2-tutorial.localhost/album-rest

    HTTP/1.1 200 OK
    Date: Sat, 10 Nov 2012 19:36:03 GMT
    Server: Apache/2.2.22 (Ubuntu)
    X-Powered-By: PHP/5.4.8-1~precise+1
    Content-Length: 320
    Content-Type: application/json

    {&quot;content&quot;:{&quot;data&quot;:[{&quot;id&quot;:&quot;1&quot;,&quot;artist&quot;:&quot;The  Military  Wives&quot;,&quot;title&quot;:&quot;In  My  Dreams&quot;},{&quot;id&quot;:&quot;2&quot;,&quot;artist&quot;:&quot;Adele&quot;,&quot;title&quot;:&quot;21&quot;},{&quot;id&quot;:&quot;3&quot;,&quot;artist&quot;:&quot;Bruce  Springsteen&quot;,&quot;title&quot;:&quot;Wrecking Ball (Deluxe)&quot;},{&quot;id&quot;:&quot;4&quot;,&quot;artist&quot;:&quot;Lana  Del  Rey&quot;,&quot;title&quot;:&quot;Born  To  Die&quot;},{&quot;id&quot;:&quot;5&quot;,&quot;artist&quot;:&quot;Gotye&quot;,&quot;title&quot;:&quot;Making  Mirrors&quot;}]}}
    &lt;/pre&gt;
    &lt;h1&gt;
        Adding Missing functionality
    &lt;/h1&gt;
    &lt;p&gt;
        Let's add the rest of the functionality to &lt;code&gt;AlbumRestController&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h2&gt;
        Get Album
    &lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums:26 lang-prepro&quot;&gt;
public function get($id)
{
    $album = $this-&amp;gt;getAlbumTable()-&amp;gt;getAlbum($id);

    return array(&quot;data&quot; =&amp;gt; $album);
}
&lt;/pre&gt;
    &lt;p&gt;
        And run curl to see the output.
    &lt;/p&gt;
    &lt;pre&gt;
    $ curl -i -H &quot;Accept: application/json&quot; http://zf2-tutorial.localhost/album-rest/1

    HTTP/1.1 200 OK
    Date: Sat, 10 Nov 2012 19:45:07 GMT
    Server: Apache/2.2.22 (Ubuntu)
    X-Powered-By: PHP/5.4.8-1~precise+1
    Content-Length: 88
    Content-Type: application/json

    {&quot;content&quot;:{&quot;data&quot;:{&quot;id&quot;:&quot;1&quot;,&quot;artist&quot;:&quot;The  Military  Wives&quot;,&quot;title&quot;:&quot;In  My  Dreams&quot;}}}
    &lt;/pre&gt;
    &lt;h2&gt;
        Add Album
    &lt;/h2&gt;We need to modify the &lt;code&gt;AlbumTable&lt;/code&gt; in &lt;code&gt;module/Album/src/Album/Model&lt;/code&gt; to return the generated id
&lt;pre class=&quot;prettyprint linenums:32 lang-prepro&quot;&gt;
public function saveAlbum(Album $album)
{
    $data = array(
        'artist' =&amp;gt; $album-&amp;gt;artist,
        'title'  =&amp;gt; $album-&amp;gt;title,
    );

    $id = (int)$album-&amp;gt;id;
    if ($id == 0) {
        $this-&amp;gt;tableGateway-&amp;gt;insert($data);
        $id = $this-&amp;gt;tableGateway-&amp;gt;getLastInsertValue(); //Add this line
    } else {
        if ($this-&amp;gt;getAlbum($id)) {
            $this-&amp;gt;tableGateway-&amp;gt;update($data, array('id' =&amp;gt; $id));
        } else {
            throw new \Exception('Form id does not exist');
        }
    }

    return $id; // Add Return
}
&lt;/pre&gt;
    &lt;p&gt;
        Modify the create method in &lt;code&gt;module/AlbumRest/src/AlbumRest/Controller/AlbumRestController&lt;/code&gt; as following:
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums:33 lang-prepro&quot;&gt;
public function create($data)
{
    $form = new AlbumForm();
    $album = new Album();
    $form-&amp;gt;setInputFilter($album-&amp;gt;getInputFilter());
    $form-&amp;gt;setData($data);
    if ($form-&amp;gt;isValid()) {
        $album-&amp;gt;exchangeArray($form-&amp;gt;getData());
        $id = $this-&amp;gt;getAlbumTable()-&amp;gt;saveAlbum($album);
    }

    return new JsonModel(array(
        'data' =&gt; $this-&gt;get($id),
    ));
}
&lt;/pre&gt;
    &lt;pre&gt;
    $ curl -i -H &quot;Accept: application/json&quot; -X POST -d &quot;artist=AC DC&amp;amp;title=Dirty Deeds&quot; http://zf2-tutorial.localhost/album-rest


    HTTP/1.1 200 OK
    Date: Sat, 10 Nov 2012 19:45:07 GMT
    Server: Apache/2.2.22 (Ubuntu)
    X-Powered-By: PHP/5.4.8-1~precise+1
    Content-Length: 88
    Content-Type: application/json

    {&quot;content&quot;:{&quot;data&quot;:{&quot;id&quot;:&quot;1&quot;,&quot;artist&quot;:&quot;The  Military  Wives&quot;,&quot;title&quot;:&quot;In  My  Dreams&quot;}}}
    &lt;/pre&gt;
    &lt;h2&gt;
        Edit Album
    &lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums:47 lang-prepro&quot;&gt;
public function update($id, $data)
{
    $data['id'] = $id;
    $album = $this-&amp;gt;getAlbumTable()-&amp;gt;getAlbum($id);
    $form  = new AlbumForm();
    $form-&amp;gt;bind($album);
    $form-&amp;gt;setInputFilter($album-&amp;gt;getInputFilter());
    $form-&amp;gt;setData($data);
    if ($form-&amp;gt;isValid()) {
        $id = $this-&amp;gt;getAlbumTable()-&amp;gt;saveAlbum($form-&amp;gt;getData());
    }

    return new JsonModel(array(
        'data' =&gt; $this-&gt;get($id),
    ));
}
&lt;/pre&gt;
    &lt;pre&gt;
    $ curl -i -H &quot;Accept: application/json&quot; -X PUT -d &quot;artist=Ac-Dc&amp;amp;title=Dirty Deeds&quot; http://zf2-tutorial.localhost/album-rest/1

    HTTP/1.1 200 OK
    Date: Sun, 11 Nov 2012 01:25:11 GMT
    Server: Apache/2.2.22 (Ubuntu)
    X-Powered-By: PHP/5.4.8-1~precise+1
    Content-Length: 70
    Content-Type: application/json

    {&quot;content&quot;:{&quot;data&quot;:{&quot;id&quot;:&quot;1&quot;,&quot;artist&quot;:&quot;Ac-Dc&quot;,&quot;title&quot;:&quot;Dirty Deeds&quot;}}}
    &lt;/pre&gt;
    &lt;h2&gt;
        Delete Album
    &lt;/h2&gt;
&lt;pre class=&quot;prettyprint linenums:62 lang-prepro&quot;&gt;
public function delete($id)
{
    $this-&gt;getAlbumTable()-&gt;deleteAlbum($id);

    return new JsonModel(array(
        'data' =&gt; 'deleted',
    ));
}
&lt;/pre&gt;
    &lt;pre&gt;
    $ curl -i -H &quot;Accept: application/json&quot; -X DELETE http://modules.zendframework.com.dev/album-rest/7

    HTTP/1.1 200 OK
    Date: Sun, 11 Nov 2012 01:28:43 GMT
    Server: Apache/2.2.22 (Ubuntu)
    X-Powered-By: PHP/5.4.8-1~precise+1
    Content-Length: 30
    Content-Type: application/json

    {&quot;content&quot;:{&quot;data&quot;:&quot;deleted&quot;}}
    &lt;/pre&gt;
    &lt;p&gt;
        So now we have turned our Album into a Restfull Application. I wanted to implement a jGrid for this tutorial but i belive that would be suited for a new Module. Thanks for all the commments to upgrade/fix this blog.
    &lt;/p&gt;
    &lt;p&gt;
        The sample source code for this Module can be found &lt;a href=&quot;https://github.com/hounddog/AlbumRest&quot;&gt;here&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Traits with Zend Framework 2</title>
   <link href="http://hounddog.github.com/blog/using-traits-in-zend-framework-2"/>
   <updated>2012-11-06T00:00:00+01:00</updated>
   <id>http://hounddog.github.com/blog/using-traits-in-zend-framework-2</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;p&gt;
        Today i want to show you the usefulness of Traits within ZF 2. Some of you like me are maybe wondering when you want to have the ServiceManager injected you always have to create something like this.
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;
&amp;lt;?php
namespace Application\Service;

use Zend\ServiceManager\ServiceManagerAwareInterface;
use Zend\ServiceManager\ServiceManager;

class MyService  implements ServiceManagerAwareInterface
{
    /**
     * @var ServiceManager
     */
    protected $serviceManager;

    //implement some code here

    /**
     * Retrieve service manager instance
     *
     * @return ServiceManager
     */
    public function getServiceManager()
    {
        return $this-&amp;gt;serviceManager;
    }

    /**
     * Set service manager instance
     *
     * @param ServiceManager $locator
     * @return User
     */
    public function setServiceManager(ServiceManager $serviceManager)
    {
        $this-&amp;gt;serviceManager = $serviceManager;
        return $this;
    }
}
&lt;/pre&gt;

    &lt;p&gt;
        This you will probably be doing for many Services. The result... the code becomes bloated. We are not following DRY principles. Instead we are copying and pasting this code all over the place. If the structure changes sometime in the future we have to also replace this everywhere.
    &lt;/p&gt;
    &lt;p&gt;
        If you are using PHP 5.4 You are in luck as you can now use traits. I will not go into detail about traits as there are a good bunch of tutorials out there explaining these and the &lt;a href=&quot;http://php.net/manual/en/language.oop5.traits.php&quot; target=&quot;_blank&quot;&gt;PHP Manual&lt;/a&gt; is also quite extensive on this topic.
    &lt;/p&gt;
    &lt;p&gt;
        I just want to show you a short example here on how you can actually benefit from them.
    &lt;/p&gt;Let's get started creating a trait for ServiceManager. I assume here that you are using the &lt;a href=&quot;https://github.com/zendframework/ZendSkeletonApplication&quot;&gt;ZendSkeletonApplication&lt;/a&gt;.
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace Application\Provider;

use Zend\ServiceManager\ServiceManager;

trait ProvidesServiceManager
{
  /**
   * @var ServiceManager
   */
  protected $serviceManager;

  /**
   * Retrieve service manager instance
   *
   * @return ServiceManager
   */
  public function getServiceManager()
  {
      return $this-&amp;gt;serviceManager;
  }

  /**
   * Set service manager instance
   *
   * @param ServiceManager $locator
   * @return User
   */
  public function setServiceManager(ServiceManager $serviceManager)
  {
      $this-&amp;gt;serviceManager = $serviceManager;
      return $this;
  }
}
&lt;/pre&gt;
    &lt;p&gt;
        To use this we now go back to our Service and change it as follows:
    &lt;/p&gt;
    &lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace Application\Service;

use Zend\ServiceManager\ServiceManagerAwareInterface;
use Application\Provider\ProvidesServiceManager;

class MyService  implements ServiceManagerAwareInterface
{
    use ProvidesServiceManager;// Insert Trait

    // implement code here....
}
&lt;/pre&gt;
    &lt;p&gt;
        And voila, we are now using all the methods from TraitServiceManager within our own service! At the time of writing this Matthew Weier O'Phinney gave me the hint that a trait for EventManager is already existing. Thanks for that.
    &lt;/p&gt;
    &lt;p&gt;
        Let's implement that also in our Service.
    &lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
&amp;lt;?php
namespace Application\Service;

use Zend\EventManager\EventManagerAwareInterface;
use Zend\ServiceManager\ServiceManagerAwareInterface;

use Application\Provider\ProvidesServiceManager;
use Zend\EventManager\ProvidesEvents;

class MyService  implements ServiceManagerAwareInterface, EventManagerAwareInterface
{
    use ProvidesServiceManager, ProvidesEvents; //Insert Multiple Traits

    // implement code here....
}
&lt;/pre&gt;
    &lt;p&gt;
        Now we have implement the functionality required for ServiceManager and EntityManager without needing to implement the getters/setter for these!
    &lt;/p&gt;
    &lt;p&gt;
        There are many other useful things for using Traits i can think of like DbMapper implementing a pagination etc etc etc. I hope you enjoyed this little excursion on How traits can be useful in your daily development. Happy Coding!
    &lt;/p&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Zend Framework 1.x + Doctrine Migrations 2.x - How to</title>
   <link href="http://hounddog.github.com/blog/zend-framework-1.x-doctrine-migrations-2.x-how-to"/>
   <updated>2012-10-05T00:00:00+02:00</updated>
   <id>http://hounddog.github.com/blog/zend-framework-1.x-doctrine-migrations-2.x-how-to</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
  &lt;p&gt;
    Hello everybody!
  &lt;/p&gt;

  &lt;p&gt;
    PEM (on irc freenode #dojo) and me have worked hard to make something useful to you!
  &lt;/p&gt;
  &lt;p&gt;
    I'm pretty sure some of you already encountered that situation when you feel like poping your eyes out because of incomplete documentations, or lack of help/support...
    If you are reading this, you most likely were about to throw away your computer in anger... Fear not! We will try to save your day :)
  &lt;p&gt;
  &lt;p&gt;Just follow the steps :&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      You can have a look at my repository on github : &lt;a href=&quot;https://github.com/PEM-FR/Doctrine2-ZendFramework1-Migrations-Setup&quot; title=&quot;Doctrine Migration Scripts&quot; target=&quot;_blank&quot;&gt;Doctrine Migration Scripts for Zend Framework support&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      You have now two choices :
      &lt;ul&gt;
        &lt;li&gt;
          Integrates Migrations into your already existing Doctrine folder, in this path : Doctrine/DBAL/Migrations.
        &lt;/li&gt;
        &lt;li&gt;
          Use Migrations as Standalone (in that case jump to step xxx).
        &lt;/li&gt;
      &lt;/ul
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;USING MIGRATIONS INSIDE DOCTRINE FOLDER&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      So now basically you should have something like this :
      &lt;ul&gt;
       &lt;li&gt;Doctrine/DBAl/Migrations&lt;/li&gt;
       &lt;li&gt;Doctrine/DBAl/Migrations/Configuration&lt;/li&gt;
       &lt;li&gt;Doctrine/DBAl/Migrations/Tools&lt;/li&gt;
       &lt;li&gt;Doctrine/DBAl/Migrations/Tools/Console&lt;/li&gt;
       &lt;li&gt;Doctrine/DBAl/Migrations/Tools/Console/Command&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;In the *scripts* directory you should have a file called ZendConfiguration.php (if not something went wrong go back to step 1)&lt;/li&gt;
    &lt;li&gt;If you have zend framework installed and running, with doctrine, you might want to create a file called doctrine.php (or whatever you like if you know already what we are talking about, or you could use the one provided in the scripts folder).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;doctrine.php should look like that (DO NOT FORGET TO EDIT THE FILE AND CHANGE THE PATHS)&lt;/p&gt;
  &lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
  // Display errors ?
  //ini_set('display_errors', 1);
  //error_reporting(E_ALL | E_STRICT);

  // Define path to application directory
  // DO NOT FORGET TO EDIT
  defined('APPLICATION_PATH')
      || define('APPLICATION_PATH','/path/to/your/application');

  // Define application environment
  defined('APPLICATION_ENV')
      || define(
          'APPLICATION_ENV',
          (getenv('APPLICATION_ENV') ? getenv('APPLICATION_ENV') : 'development')
      );

  // Ensure library/ is on include_path
  // DO NOT FORGET TO EDIT
  set_include_path(
      '/path/to/where/your/zend/library/is' . PATH_SEPARATOR .
      '/path/to/Doctrine' . PATH_SEPARATOR .
      get_include_path()
  );

  // Requiring a batch of Classes we will need for namespacing
  use Doctrine\Common\ClassLoader,
      Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper,
      Doctrine\ORM\Version,
      Doctrine\ORM\Tools\Console\ConsoleRunner,
      Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper,
      Symfony\Component\Console\Helper\HelperSet,
      Symfony\Component\Console\Helper\DialogHelper,
      Symfony\Component\Console\Application;

  // namespacing migrations commands we will be needing later
  use Doctrine\DBAL\Migrations\Tools\Console\Command\DiffCommand,
      Doctrine\DBAL\Migrations\Tools\Console\Command\ExecuteCommand,
      Doctrine\DBAL\Migrations\Tools\Console\Command\GenerateCommand,
      Doctrine\DBAL\Migrations\Tools\Console\Command\MigrateCommand,
      Doctrine\DBAL\Migrations\Tools\Console\Command\StatusCommand,
      Doctrine\DBAL\Migrations\Tools\Console\Command\VersionCommand;

  // We need the Doctrine ClassLoader to manage autoloading
  require_once 'Doctrine/Common/ClassLoader.php';

  // Load Doctrine
  $classLoader = new ClassLoader('Doctrine');
  $classLoader-&gt;register();

  // Load Symfony tools
  $classLoader = new ClassLoader('Symfony', 'Doctrine');
  $classLoader-&gt;register();

  // Load Migration
  $classLoader = new ClassLoader('Migrations', 'Doctrine/DBAL/');
  $classLoader-&gt;register();

  // Zend_Application
  require_once 'Zend/Application.php';

  // Create application
  // DO NOT FORGET TO EDIT
  $application = new Zend_Application(
      APPLICATION_ENV, '/path/to/application.ini'
  );

  // Bootstrap
  $application-&gt;bootstrap();

  // loading doctrine resource, sometimes called entityManager
  // DO NOT FORGET TO EDIT, set the resource to your entityManager
  $em = $application-&gt;getBootstrap()-&gt;getResource('db');

  // Load doctrine helpers
  $helperSet = new HelperSet(array(
      'db'     =&gt; new ConnectionHelper($em-&gt;getConnection()),
      'em'     =&gt; new EntityManagerHelper($em),
      'dialog' =&gt; new DialogHelper()
  ));

  $cli = new Application('Doctrine Command Line Interface', Version::VERSION);
  $cli-&gt;setCatchExceptions(true);
  $cli-&gt;setHelperSet($helperSet);

  // We are settign the commands to bypass the configuration process and
  // directly use our ZendConfiguration
  // Just make sure to load from where the file actually is
  require_once('ZendConfiguration.php');
  $connexion = $em-&gt;getConnection();
  $zendConfig = new ZendConfiguration($connexion);

  // injecting configurations necessary to our ZendConfiguration
  // Pass the Application.ini Parameters to our Configuration
  $applicationConfig = new Zend_Config(
      $application-&gt;getBootstrap()-&gt;getOptions(), true
  );
  // DO NOT FORGET TO EDIT, if needed
  $zendConfig-&gt;setConfig($applicationConfig-&gt;resources-&gt;db-&gt;migration);
  // Here we just need to put some string because the parameter is not optional
  // though will not need it. Just need to call the function
  $zendConfig-&gt;load('zend');

  // Setting up Migrations Commands
  $diffCmd = new DiffCommand();
  $diffCmd-&gt;setMigrationConfiguration($zendConfig);

  $executeCmd = new ExecuteCommand();
  $executeCmd-&gt;setMigrationConfiguration($zendConfig);

  $generateCmd = new GenerateCommand();
  $generateCmd-&gt;setMigrationConfiguration($zendConfig);

  $migrateCmd = new MigrateCommand();
  $migrateCmd-&gt;setMigrationConfiguration($zendConfig);

  $statusCmd = new StatusCommand();
  $statusCmd-&gt;setMigrationConfiguration($zendConfig);

  $versionCmd = new VersionCommand();
  $versionCmd-&gt;setMigrationConfiguration($zendConfig);


  // Register migration Commands
  $cli-&gt;addCommands(array(
      $diffCmd, $executeCmd, $generateCmd, $migrateCmd, $statusCmd, $versionCmd
  ));

  // Register All Doctrine Commands
  ConsoleRunner::addCommands($cli);

  // Runs console application
  $cli-&gt;run();
  &lt;/pre&gt;
  &lt;p&gt;for some more information you might want to check this article : &lt;a href=&quot;http://victimofbabylon.com/setting-up-doctrine-2-cli-with-zend-framework&quot; title=&quot;Setting up doctrine 2 cli for zend framework&quot; target=&quot;_blank&quot;&gt;Setting up doctrine 2 cli for zend framework&lt;/a&gt;
  &lt;p&gt;
  &lt;p&gt;We now have to tweak your Zend Framework application.ini file. Add these few lines :&lt;/p&gt;
  &lt;pre class=&quot;prettyprint linenums lang-prepro&quot;&gt;
  ; ------------------------------------------------------------------------------
  ; Doctrine Migrations Configuration
  ; ------------------------------------------------------------------------------
  resources.db.migration.name = &quot;YourSoft (development) Database Migrations&quot;
  resources.db.migration.tableName = &quot;doctrine_migration_versions&quot;
  resources.db.migration.namespace = &quot;DoctrineMigrations&quot;
  resources.db.migration.directory = APPLICATION_PATH &quot;/path/to/migrationsClass/directory&quot;
  ;set the following two properties if you want to do manual naming on migration classes
  ;resources.doctrine.migration.migrations.migration1.version = &quot;20111020071337&quot;
  ;resources.doctrine.migration.migrations.migration1.class = &quot;DoctrineMigrations\VersionNewMigration&quot;
  &lt;/pre&gt;
  &lt;p&gt;Now, try running from the scripts directory : &lt;/p&gt;
  &lt;pre class=&quot;prettyprint linenums lang-sh&quot;&gt;
  ~$ php doctrine.php list migrations
  &lt;/pre&gt;
  &lt;p&gt;As a result, you should see the commands available, something like that :&lt;/p&gt;
  &lt;pre class=&quot;prettyprint linenums lang-sh&quot;&gt;
    Doctrine Command Line Interface version 2.2.1

    Usage:
      [options] command [arguments]

    Options:
      --help           -h Display this help message.
      --quiet          -q Do not output any message.
      --verbose        -v Increase verbosity of messages.
      --version        -V Display this program version.
      --ansi              Force ANSI output.
      --no-ansi           Disable ANSI output.
      --no-interaction -n Do not ask any interactive question.

    Available commands for the &quot;migration&quot; namespace:
      migrations:diff       Generate a migration by comparing your...
      migrations:execute    Execute a single migration version up or down manually.
      migrations:generate   Generate a blank migration class.
      migrations:migrate    Execute a migration to a specified version...
      migrations:status     View the status of a set of migrations.
      migrations:version    Manually add and delete migration versions...
    &lt;/pre&gt;

  &lt;p&gt;You are now supposed to cry of joy and let a Victory shout be heard by the whole company :)&lt;/p&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>My Journey in Continuous Deployment</title>
   <link href="http://hounddog.github.com/blog/continuous-deployment-1"/>
   <updated>2012-10-05T00:00:00+02:00</updated>
   <id>http://hounddog.github.com/blog/continuous-deployment-1</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;p&gt;
      This will be a series of blogs about Continuous Deployment and how to get there. I will be writing about problems which I am facing and what I am experimenting with.
    &lt;/p&gt;

    &lt;p&gt;
      The target of this is to implement a fully automated system which continuously integrates and deploys our development to production servers.
    &lt;/p&gt;

    &lt;p&gt;
      Our main tool we use for this is &lt;a href=&quot;http://jenkins-ci.org/&quot; title=&quot;jenkins&quot;&gt;Jenkins&lt;/a&gt;. If you are not familiar with this. Please have a look. It has lot of plugins which can help you implement automated strategies.
    &lt;/p&gt;

    &lt;p&gt;So, where am I at the moment?&lt;/p&gt;

    &lt;p&gt;
      We are fairly new at using git and are currently discussing viable options on how to implement a successful strategy for git.
    &lt;/p&gt;

    &lt;p&gt;
      Currently I have implemented the solution given &lt;a href=&quot;http://twasink.net/2011/09/20/git-feature-branches-and-jenkins-or-how-i-learned-to-stop-worrying-about-broken-builds/&quot; title=&quot;here&quot;&gt;here&lt;/a&gt;
    &lt;/p&gt;

    &lt;p&gt;
      This solution is great, all the branches are tracked and tested against the master branch.
      But... this provides us with another problem... What if we do not want every branch to be tested directly or tested against the master branch?
    &lt;/p&gt;

    &lt;p&gt;
      For this I am currently looking at opt-in branches by using a configuration file as described &lt;a href=&quot;http://amokti.me/2011/10/11/automatic-opt-in-branch-building-with-jenkins-and-git-2/&quot; title=&quot;here&quot;&gt;here&lt;/a&gt;
    &lt;/p&gt;

    &lt;p&gt;
      What I find interesting in this approach is that I could also modify it to use different jobs within Jenkins by adding parameters in the config file.
      More about this later as I am not sure which approach I would be finally taking.
    &lt;/p&gt;

    &lt;p&gt;
      So, our branching as described above works and all the branches are automatically pushed to the master. Just that each developer has to wait currently for about 12 minutes to know if anything has failed or is Working as expected.
    &lt;/p&gt;

    &lt;p&gt;I like working fast and getting Results fast. &lt;/p&gt;

    &lt;p&gt;
      I have been toying around with Jenkins to make things work faster but hitting lot of Road blocks on the way.
      As this is a pure php project we are also using phing to create the build.
    &lt;/p&gt;

    &lt;p&gt;
      The first question arises when I look at the build.xml which is one huge build process.
    &lt;/p&gt;

    &lt;p&gt;
      To make the build process faster I need to split this up into tasks which can be run in parallel.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Cleanup the Workspace&lt;/li&gt;
      &lt;li&gt;Initialize the Database&lt;/li&gt;
      &lt;li&gt;Run Unit Tests&lt;/li&gt;
      &lt;li&gt;Run Integration Tests&lt;/li&gt;
      &lt;li&gt;Run Statistic Analysers (PHPMD, Pdepend etc)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
      I had a look at Creating Downstream jobs within Jenkins. This is an Interesting Approach but does not suit our needs currently.
    &lt;/p&gt;

    &lt;p&gt;
      A downstream job is a job that executes after the Upstream job is completed.
    &lt;/p&gt;

    &lt;p&gt;
      My first attempt was to have a look at the build pipeline plugin. Works great but the Master job is successful even if the Downstream job fails. So I would never really get a fully broken build through the Downstream jobs.
    &lt;/p&gt;

    &lt;p&gt;
      I am going to check today if it is possible by using the Job Join plugin from Jenkins.
    &lt;/p&gt;

    &lt;p&gt;
      As per the information I have gathered I can run another Job after all the Downstream jobs have Completed which would allow me to aggregate all the final Results.
    &lt;/p&gt;

    &lt;p&gt;
      So, I will get started and let you guys know how it ended very soon!
    &lt;/p&gt;

    &lt;p&gt;
      To be Continued... :)
    &lt;/p&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Creating my own page with Jekyll and Github</title>
   <link href="http://hounddog.github.com/blog/creating-my-page-with-jekyll.html"/>
   <updated>2012-09-29T00:00:00+02:00</updated>
   <id>http://hounddog.github.com/blog/creating-my-page-with-jekyll.html</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;span12 columns&quot;&gt;
        &lt;h2&gt;Why?&lt;/h2&gt;
        &lt;p&gt;I want to share my thoughts with the community.&lt;/p&gt;
        &lt;p&gt;
            I have been working as a Developer for a long time now without my own page.
            So i decided to create one on Github and with a short discussion thx to &lt;a href=&quot;http://ocramius.github.com/blog/moving-my-blog-to-jekyll/&quot; target=&quot;_blank&quot;&gt;Marco Pivetta &lt;/a&gt;. I copied his page and quickly dived into the code and found it very simple to setup.
        &lt;/p&gt;
        &lt;p&gt;
            Within just a few hours i was able to setup and modify my page. So here i am finally. Keep watching for updates.
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Creating my own page with Jekyll and Github</title>
   <link href="http://hounddog.github.com/blog/creating-my-page-with-jekyll"/>
   <updated>2012-09-29T00:00:00+02:00</updated>
   <id>http://hounddog.github.com/blog/creating-my-page-with-jekyll</id>
   <content type="html">&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;span12 columns&quot;&gt;
        &lt;h2&gt;Why?&lt;/h2&gt;
        &lt;p&gt;I want to share my thoughts with the community.&lt;/p&gt;
        &lt;p&gt;
            I have been working as a Developer for a long time now without my own page.
            So i decided to create one on Github and with a short discussion thx to &lt;a href=&quot;http://ocramius.github.com/blog/moving-my-blog-to-jekyll/&quot; target=&quot;_blank&quot;&gt;Marco Pivetta &lt;/a&gt;. I copied his page and quickly dived into the code and found it very simple to setup.
        &lt;/p&gt;
        &lt;p&gt;
            Within just a few hours i was able to setup and modify my page. So here i am finally. Keep watching for updates.
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</content>
 </entry>
 

</feed>